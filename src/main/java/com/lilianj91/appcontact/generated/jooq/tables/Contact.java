/*
 * This file is generated by jOOQ.
 */
package com.lilianj91.appcontact.generated.jooq.tables;


import com.lilianj91.appcontact.generated.jooq.Keys;
import com.lilianj91.appcontact.generated.jooq.tables.records.ContactRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Contact extends TableImpl<ContactRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>contact.contact</code>
     */
    public static final Contact CONTACT_ = new Contact();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ContactRecord> getRecordType() {
        return ContactRecord.class;
    }

    /**
     * The column <code>contact.contact.first_name</code>.
     */
    public final TableField<ContactRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>contact.contact.last_name</code>.
     */
    public final TableField<ContactRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>contact.contact.full_name</code>.
     */
    public final TableField<ContactRecord, String> FULL_NAME = createField(DSL.name("full_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>contact.contact.birth_date</code>.
     */
    public final TableField<ContactRecord, OffsetDateTime> BIRTH_DATE = createField(DSL.name("birth_date"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>contact.contact.address</code>.
     */
    public final TableField<ContactRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>contact.contact.email</code>.
     */
    public final TableField<ContactRecord, String> EMAIL = createField(DSL.name("email"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>contact.contact.mobile_phone_number</code>.
     */
    public final TableField<ContactRecord, String> MOBILE_PHONE_NUMBER = createField(DSL.name("mobile_phone_number"), SQLDataType.CLOB.nullable(false), this, "");

    private Contact(Name alias, Table<ContactRecord> aliased) {
        this(alias, aliased, null);
    }

    private Contact(Name alias, Table<ContactRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>contact.contact</code> table reference
     */
    public Contact(String alias) {
        this(DSL.name(alias), CONTACT_);
    }

    /**
     * Create an aliased <code>contact.contact</code> table reference
     */
    public Contact(Name alias) {
        this(alias, CONTACT_);
    }

    /**
     * Create a <code>contact.contact</code> table reference
     */
    public Contact() {
        this(DSL.name("contact"), null);
    }

    public <O extends Record> Contact(Table<O> child, ForeignKey<O, ContactRecord> key) {
        super(child, key, CONTACT_);
    }

    @Override
    public Schema getSchema() {
        return com.lilianj91.appcontact.generated.jooq.Contact.CONTACT;
    }

    @Override
    public UniqueKey<ContactRecord> getPrimaryKey() {
        return Keys.PK_CONTACT_EMAIL;
    }

    @Override
    public List<UniqueKey<ContactRecord>> getKeys() {
        return Arrays.<UniqueKey<ContactRecord>>asList(Keys.PK_CONTACT_EMAIL);
    }

    @Override
    public Contact as(String alias) {
        return new Contact(DSL.name(alias), this);
    }

    @Override
    public Contact as(Name alias) {
        return new Contact(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(String name) {
        return new Contact(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Contact rename(Name name) {
        return new Contact(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, OffsetDateTime, String, String, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
